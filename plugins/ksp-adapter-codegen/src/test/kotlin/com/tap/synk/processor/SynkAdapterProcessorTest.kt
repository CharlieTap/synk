package com.tap.synk.processor

import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.symbolProcessorProviders
import org.intellij.lang.annotations.Language
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder
import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class SynkAdapterProcessorTest {

    @Rule
    @JvmField
    var temporaryFolder: TemporaryFolder = TemporaryFolder()

    @Test
    fun `compilation fails when target does not implement IDResolver`() {
        val compilationResult = compile(FOO_NOT_IMPLEMENTED_ID_RESOLVER)

        assertEquals(KotlinCompilation.ExitCode.COMPILATION_ERROR, compilationResult.exitCode)
        val expectedMessage = "@SynkAdapter annotated class com.test.processor.FooResolver must implement IDResolver interface"
        assertTrue("Expected message containing text $expectedMessage but got: ${compilationResult.messages}") {
            compilationResult.messages.contains(expectedMessage)
        }
    }

    @Test
    fun `compilation succeed when target implement IDResolver interface`() {

        val compilationResult = compile(FOO_DATA_CLASS, FOO_ID_RESOLVER)

        assertEquals(KotlinCompilation.ExitCode.OK, compilationResult.exitCode)
        assertSourceEquals(
            """
                // Code generated by SynkAdapter plugin. Do not edit this file.
                package com.test.processor
                
                import com.tap.synk.adapter.SynkAdapter
                import com.tap.synk.encode.MapEncoder
                import com.tap.synk.resolver.IDResolver
                
                public class FooSynkAdapter(
                    private val idResolver: IDResolver<Foo> = FooResolver(),
                    private val mapEncoder: MapEncoder<Foo> = FooMapEncoder(),
                ) : SynkAdapter<Foo>, IDResolver<Foo> by idResolver, MapEncoder<Foo> by mapEncoder
            """.trimIndent(),
            compilationResult.sourceFor("FooSynkAdapter.kt")
        )
    }

    private fun compile(vararg source: SourceFile) = KotlinCompilation().apply {
        sources = source.toList()
        symbolProcessorProviders = listOf(SynkAdapterProcessorProvider())
        workingDir = temporaryFolder.root
        inheritClassPath = true
        verbose = false
    }.compile()


    private fun assertSourceEquals(@Language("kotlin") expected: String, actual: String) {
        assertEquals(
            expected.trimIndent(),
            // unfortunate hack needed as we cannot enter expected text with tabs rather than spaces
            actual.trimIndent().replace("\t", "    ")
        )
    }

    private fun KotlinCompilation.Result.sourceFor(fileName: String): String {
        return kspGeneratedSources().find { it.name == fileName }
            ?.readText()
            ?: throw IllegalArgumentException("Could not find file $fileName in ${kspGeneratedSources()}")
    }

    private fun KotlinCompilation.Result.kspGeneratedSources(): List<File> {
        val kspWorkingDir = workingDir.resolve("ksp")
        val kspGeneratedDir = kspWorkingDir.resolve("sources")
        val kotlinGeneratedDir = kspGeneratedDir.resolve("kotlin")
        val javaGeneratedDir = kspGeneratedDir.resolve("java")
        return kotlinGeneratedDir.walk().toList() +
                javaGeneratedDir.walk().toList()
    }

    private val KotlinCompilation.Result.workingDir: File
        get() = checkNotNull(outputDirectory.parentFile)
}